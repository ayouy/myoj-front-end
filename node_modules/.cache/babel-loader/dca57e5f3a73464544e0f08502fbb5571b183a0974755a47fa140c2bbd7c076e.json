{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport React, { cloneElement } from 'react';\nimport { isArray } from './is';\nexport default function getHighlightText(_a) {\n  var nodeList = _a.nodeList,\n    pattern = _a.pattern,\n    highlightClassName = _a.highlightClassName;\n  if (!pattern) {\n    return nodeList;\n  }\n  var transformNode = function (node) {\n    if (node && node.props && typeof node.props.children === 'string') {\n      return cloneElement(node, undefined, React.createElement(HighlightText, {\n        text: node.props.children,\n        keyword: pattern,\n        highlightClassName: highlightClassName\n      }));\n    }\n    return node;\n  };\n  return isArray(nodeList) ? nodeList.map(function (node) {\n    return transformNode(node);\n  }) : transformNode(nodeList);\n}\nfunction HighlightText(_a) {\n  var text = _a.text,\n    keyword = _a.keyword,\n    highlightClassName = _a.highlightClassName;\n  if (!keyword) return React.createElement(React.Fragment, null, text);\n  // limit keyword length to avoid Regular expression too large error\n  if (keyword.length > 1000) {\n    keyword = keyword.slice(0, 1000);\n  }\n  // 注意这里的括号，这里使用了带capture group功能的正则，来split字符串\n  // 从而在strArr中可以保留匹配文本\n  var re = new RegExp(\"(\" + escapeRegExp(keyword) + \")\", 'i');\n  var strArr = text.split(re);\n  return React.createElement(React.Fragment, null, strArr.map(function (item, index) {\n    return re.test(item) ? React.createElement(\"span\", {\n      key: index,\n      className: highlightClassName\n    }, item) : React.createElement(\"span\", {\n      key: index\n    }, item);\n  }));\n}","map":{"version":3,"names":["escapeRegExp","React","cloneElement","isArray","getHighlightText","_a","nodeList","pattern","highlightClassName","transformNode","node","props","children","undefined","createElement","HighlightText","text","keyword","map","Fragment","length","slice","re","RegExp","strArr","split","item","index","test","key","className"],"sources":["D:/Nodejs/oj-frontend/node_modules/@arco-design/web-react/es/_util/getHighlightText.js"],"sourcesContent":["import escapeRegExp from 'lodash/escapeRegExp';\nimport React, { cloneElement } from 'react';\nimport { isArray } from './is';\nexport default function getHighlightText(_a) {\n    var nodeList = _a.nodeList, pattern = _a.pattern, highlightClassName = _a.highlightClassName;\n    if (!pattern) {\n        return nodeList;\n    }\n    var transformNode = function (node) {\n        if (node && node.props && typeof node.props.children === 'string') {\n            return cloneElement(node, undefined, React.createElement(HighlightText, { text: node.props.children, keyword: pattern, highlightClassName: highlightClassName }));\n        }\n        return node;\n    };\n    return isArray(nodeList) ? nodeList.map(function (node) { return transformNode(node); }) : transformNode(nodeList);\n}\nfunction HighlightText(_a) {\n    var text = _a.text, keyword = _a.keyword, highlightClassName = _a.highlightClassName;\n    if (!keyword)\n        return React.createElement(React.Fragment, null, text);\n    // limit keyword length to avoid Regular expression too large error\n    if (keyword.length > 1000) {\n        keyword = keyword.slice(0, 1000);\n    }\n    // 注意这里的括号，这里使用了带capture group功能的正则，来split字符串\n    // 从而在strArr中可以保留匹配文本\n    var re = new RegExp(\"(\" + escapeRegExp(keyword) + \")\", 'i');\n    var strArr = text.split(re);\n    return (React.createElement(React.Fragment, null, strArr.map(function (item, index) {\n        return re.test(item) ? (React.createElement(\"span\", { key: index, className: highlightClassName }, item)) : (React.createElement(\"span\", { key: index }, item));\n    })));\n}\n"],"mappings":";AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,KAAK,IAAIC,YAAY,QAAQ,OAAO;AAC3C,SAASC,OAAO,QAAQ,MAAM;AAC9B,eAAe,SAASC,gBAAgBA,CAACC,EAAE,EAAE;EACzC,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAQ;IAAEC,OAAO,GAAGF,EAAE,CAACE,OAAO;IAAEC,kBAAkB,GAAGH,EAAE,CAACG,kBAAkB;EAC5F,IAAI,CAACD,OAAO,EAAE;IACV,OAAOD,QAAQ;EACnB;EACA,IAAIG,aAAa,GAAG,SAAAA,CAAUC,IAAI,EAAE;IAChC,IAAIA,IAAI,IAAIA,IAAI,CAACC,KAAK,IAAI,OAAOD,IAAI,CAACC,KAAK,CAACC,QAAQ,KAAK,QAAQ,EAAE;MAC/D,OAAOV,YAAY,CAACQ,IAAI,EAAEG,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAACC,aAAa,EAAE;QAAEC,IAAI,EAAEN,IAAI,CAACC,KAAK,CAACC,QAAQ;QAAEK,OAAO,EAAEV,OAAO;QAAEC,kBAAkB,EAAEA;MAAmB,CAAC,CAAC,CAAC;IACrK;IACA,OAAOE,IAAI;EACf,CAAC;EACD,OAAOP,OAAO,CAACG,QAAQ,CAAC,GAAGA,QAAQ,CAACY,GAAG,CAAC,UAAUR,IAAI,EAAE;IAAE,OAAOD,aAAa,CAACC,IAAI,CAAC;EAAE,CAAC,CAAC,GAAGD,aAAa,CAACH,QAAQ,CAAC;AACtH;AACA,SAASS,aAAaA,CAACV,EAAE,EAAE;EACvB,IAAIW,IAAI,GAAGX,EAAE,CAACW,IAAI;IAAEC,OAAO,GAAGZ,EAAE,CAACY,OAAO;IAAET,kBAAkB,GAAGH,EAAE,CAACG,kBAAkB;EACpF,IAAI,CAACS,OAAO,EACR,OAAOhB,KAAK,CAACa,aAAa,CAACb,KAAK,CAACkB,QAAQ,EAAE,IAAI,EAAEH,IAAI,CAAC;EAC1D;EACA,IAAIC,OAAO,CAACG,MAAM,GAAG,IAAI,EAAE;IACvBH,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;EACpC;EACA;EACA;EACA,IAAIC,EAAE,GAAG,IAAIC,MAAM,CAAC,GAAG,GAAGvB,YAAY,CAACiB,OAAO,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC;EAC3D,IAAIO,MAAM,GAAGR,IAAI,CAACS,KAAK,CAACH,EAAE,CAAC;EAC3B,OAAQrB,KAAK,CAACa,aAAa,CAACb,KAAK,CAACkB,QAAQ,EAAE,IAAI,EAAEK,MAAM,CAACN,GAAG,CAAC,UAAUQ,IAAI,EAAEC,KAAK,EAAE;IAChF,OAAOL,EAAE,CAACM,IAAI,CAACF,IAAI,CAAC,GAAIzB,KAAK,CAACa,aAAa,CAAC,MAAM,EAAE;MAAEe,GAAG,EAAEF,KAAK;MAAEG,SAAS,EAAEtB;IAAmB,CAAC,EAAEkB,IAAI,CAAC,GAAKzB,KAAK,CAACa,aAAa,CAAC,MAAM,EAAE;MAAEe,GAAG,EAAEF;IAAM,CAAC,EAAED,IAAI,CAAE;EACnK,CAAC,CAAC,CAAC;AACP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}